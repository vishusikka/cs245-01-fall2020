The solution for this assignment is going to contain three java files as below
Driver.java
RoadTrip.java
Graph.java

Since the user can supply 0, 1, or more stop locations in an unordered manner, 
it means in addition to finding the shortest path from start to end including the stop locations,
we need to find the right order of the stop locations to be visited.
This means we need to generate different permutations of the stop location's order and compute the
shortest path for each of them. At the end, we will choose the most optimized permutation.

The followings are the details of each java file.

Driver.java:
	- This file is in charge of running the program
	- The only function in this file will be the main method

Graph.java:
	- This file is in charge of creating the data structure that will represent a graph.
	- The methods in this file are going to be:
		- addEdge() : to add new edges to the graph
		- get() : to get the specific edge from the graph
	- I may need to add helper functions as needed

RoadTrip.java:
	- This method is going to read the csv files, store them in data structures, process the user input, and calculate the optimized shortest path.
	- The functions in this file are going to be:
		- read_roads_file(): will store the roads information into a Graph object
		- read_attractions_file(): will store the attractions into a HashMap() with attractions as key
		- shortest_path() : to find the shortest path using Dijkstra's algorithm with time complexity O(|V|^2 lg |V|)
		- route() : will handle the permtations and finding the shortest path. since Dijkstra's algorithm will be called here and will be the most 
					time consuming part of the code, the time complexity for this function will also be O(|V|^2 lg |V|)
		- I may need to add helper functions as needed.

